Qflow synthesis logfile created on Sat Jul 26 05:21:03 PM IST 2025
Running yosys for verilog parsing and synthesis
yosys  -s arch.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.33 (git sha1 2584903a060)


-- Executing script file `arch.ys' --

1. Executing Liberty frontend: /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/kor-tac/Desktop/physical/dpram/source/arch.v
Parsing Verilog input from `/home/kor-tac/Desktop/physical/dpram/source/arch.v' to AST representation.
Warning: Yosys has only limited support for tri-state logic at the moment. (/home/kor-tac/Desktop/physical/dpram/source/arch.v:133)
Warning: Yosys has only limited support for tri-state logic at the moment. (/home/kor-tac/Desktop/physical/dpram/source/arch.v:147)
Generating RTLIL representation for module `\decoder'.
Generating RTLIL representation for module `\mux'.
Generating RTLIL representation for module `\comp'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\arch'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \arch
Used module:     \dff
Used module:     \mux
Used module:         \comp
Used module:     \decoder

3.1.2. Analyzing design hierarchy..
Top module:  \arch
Used module:     \dff
Used module:     \mux
Used module:         \comp
Used module:     \decoder
Removed 0 unused modules.
Mapping positional arguments of cell arch.d34 (dff).
Mapping positional arguments of cell arch.d33 (dff).
Mapping positional arguments of cell arch.d32 (dff).
Mapping positional arguments of cell arch.d31 (dff).
Mapping positional arguments of cell arch.m4 (mux).
Mapping positional arguments of cell arch.d24 (dff).
Mapping positional arguments of cell arch.d23 (dff).
Mapping positional arguments of cell arch.d22 (dff).
Mapping positional arguments of cell arch.d21 (dff).
Mapping positional arguments of cell arch.m3 (mux).
Mapping positional arguments of cell arch.d14 (dff).
Mapping positional arguments of cell arch.d13 (dff).
Mapping positional arguments of cell arch.d12 (dff).
Mapping positional arguments of cell arch.d11 (dff).
Mapping positional arguments of cell arch.m2 (mux).
Mapping positional arguments of cell arch.f4 (dff).
Mapping positional arguments of cell arch.f3 (dff).
Mapping positional arguments of cell arch.f2 (dff).
Mapping positional arguments of cell arch.f1 (dff).
Mapping positional arguments of cell arch.m1 (mux).
Mapping positional arguments of cell arch.dd1 (decoder).
Mapping positional arguments of cell mux.c1 (comp).

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$/home/kor-tac/Desktop/physical/dpram/source/arch.v:137$95 in module arch.
Marked 2 switch rules as full_case in process $proc$/home/kor-tac/Desktop/physical/dpram/source/arch.v:137$95 in module arch.
Removed 1 dead cases from process $proc$/home/kor-tac/Desktop/physical/dpram/source/arch.v:123$94 in module arch.
Marked 2 switch rules as full_case in process $proc$/home/kor-tac/Desktop/physical/dpram/source/arch.v:123$94 in module arch.
Marked 1 switch rules as full_case in process $proc$/home/kor-tac/Desktop/physical/dpram/source/arch.v:75$76 in module dff.
Marked 4 switch rules as full_case in process $proc$/home/kor-tac/Desktop/physical/dpram/source/arch.v:36$9 in module mux.
Removed a total of 2 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 3 assignments to connections.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).

3.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~10 debug messages>

3.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\arch.$proc$/home/kor-tac/Desktop/physical/dpram/source/arch.v:137$95'.
     1/5: $2\data_out_b[15:0] [11:8]
     2/5: $2\data_out_b[15:0] [7:4]
     3/5: $2\data_out_b[15:0] [15:12]
     4/5: $2\data_out_b[15:0] [3:0]
     5/5: $1\data_out_b[15:0]
Creating decoders for process `\arch.$proc$/home/kor-tac/Desktop/physical/dpram/source/arch.v:123$94'.
     1/5: $2\data_out_a[15:0] [11:8]
     2/5: $2\data_out_a[15:0] [7:4]
     3/5: $2\data_out_a[15:0] [15:12]
     4/5: $2\data_out_a[15:0] [3:0]
     5/5: $1\data_out_a[15:0]
Creating decoders for process `\dff.$proc$/home/kor-tac/Desktop/physical/dpram/source/arch.v:75$76'.
     1/1: $0\q[0:0]
Creating decoders for process `\mux.$proc$/home/kor-tac/Desktop/physical/dpram/source/arch.v:36$9'.
     1/4: $4\data_out_mux[3:0]
     2/4: $3\data_out_mux[3:0]
     3/4: $2\data_out_mux[3:0]
     4/4: $1\data_out_mux[3:0]

3.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
Latch inferred for signal `\arch.\data_out_b [3:0]' from process `\arch.$proc$/home/kor-tac/Desktop/physical/dpram/source/arch.v:137$95': $auto$proc_dlatch.cc:427:proc_dlatch$229
Latch inferred for signal `\arch.\data_out_b [7:4]' from process `\arch.$proc$/home/kor-tac/Desktop/physical/dpram/source/arch.v:137$95': $auto$proc_dlatch.cc:427:proc_dlatch$258
Latch inferred for signal `\arch.\data_out_b [11:8]' from process `\arch.$proc$/home/kor-tac/Desktop/physical/dpram/source/arch.v:137$95': $auto$proc_dlatch.cc:427:proc_dlatch$287
Latch inferred for signal `\arch.\data_out_b [15:12]' from process `\arch.$proc$/home/kor-tac/Desktop/physical/dpram/source/arch.v:137$95': $auto$proc_dlatch.cc:427:proc_dlatch$316
Latch inferred for signal `\arch.\data_out_a [3:0]' from process `\arch.$proc$/home/kor-tac/Desktop/physical/dpram/source/arch.v:123$94': $auto$proc_dlatch.cc:427:proc_dlatch$345
Latch inferred for signal `\arch.\data_out_a [7:4]' from process `\arch.$proc$/home/kor-tac/Desktop/physical/dpram/source/arch.v:123$94': $auto$proc_dlatch.cc:427:proc_dlatch$374
Latch inferred for signal `\arch.\data_out_a [11:8]' from process `\arch.$proc$/home/kor-tac/Desktop/physical/dpram/source/arch.v:123$94': $auto$proc_dlatch.cc:427:proc_dlatch$403
Latch inferred for signal `\arch.\data_out_a [15:12]' from process `\arch.$proc$/home/kor-tac/Desktop/physical/dpram/source/arch.v:123$94': $auto$proc_dlatch.cc:427:proc_dlatch$432
Latch inferred for signal `\mux.\data_out_mux' from process `\mux.$proc$/home/kor-tac/Desktop/physical/dpram/source/arch.v:36$9': $auto$proc_dlatch.cc:427:proc_dlatch$515

3.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\dff.\q' using process `\dff.$proc$/home/kor-tac/Desktop/physical/dpram/source/arch.v:75$76'.
  created $dff cell `$procdff$516' with positive edge clock.

3.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\arch.$proc$/home/kor-tac/Desktop/physical/dpram/source/arch.v:137$95'.
Removing empty process `arch.$proc$/home/kor-tac/Desktop/physical/dpram/source/arch.v:137$95'.
Found and cleaned up 2 empty switches in `\arch.$proc$/home/kor-tac/Desktop/physical/dpram/source/arch.v:123$94'.
Removing empty process `arch.$proc$/home/kor-tac/Desktop/physical/dpram/source/arch.v:123$94'.
Found and cleaned up 2 empty switches in `\dff.$proc$/home/kor-tac/Desktop/physical/dpram/source/arch.v:75$76'.
Removing empty process `dff.$proc$/home/kor-tac/Desktop/physical/dpram/source/arch.v:75$76'.
Found and cleaned up 4 empty switches in `\mux.$proc$/home/kor-tac/Desktop/physical/dpram/source/arch.v:36$9'.
Removing empty process `mux.$proc$/home/kor-tac/Desktop/physical/dpram/source/arch.v:36$9'.
Cleaned up 10 empty switches.

3.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module arch.
<suppressed ~114 debug messages>
Optimizing module dff.
Optimizing module comp.
<suppressed ~2 debug messages>
Optimizing module mux.
<suppressed ~29 debug messages>
Optimizing module decoder.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module arch.
Optimizing module dff.
Optimizing module comp.
Optimizing module mux.
Optimizing module decoder.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arch..
Finding unused cells or wires in module \dff..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \decoder..
Removed 24 unused cells and 194 unused wires.
<suppressed ~29 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
Checking module arch...
Checking module comp...
Checking module decoder...
Checking module dff...
Checking module mux...
Found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module arch.
Optimizing module comp.
Optimizing module decoder.
Optimizing module dff.
Optimizing module mux.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arch'.
<suppressed ~84 debug messages>
Finding identical cells in module `\comp'.
<suppressed ~39 debug messages>
Finding identical cells in module `\decoder'.
<suppressed ~6 debug messages>
Finding identical cells in module `\dff'.
Finding identical cells in module `\mux'.
<suppressed ~24 debug messages>
Removed a total of 51 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \arch..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \comp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \decoder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dff..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \arch.
  Optimizing cells in module \comp.
  Optimizing cells in module \decoder.
  Optimizing cells in module \dff.
  Optimizing cells in module \mux.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arch'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\dff'.
Finding identical cells in module `\mux'.
Removed a total of 0 cells.

3.6.6. Executing OPT_DFF pass (perform DFF optimizations).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arch..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \dff..
Finding unused cells or wires in module \mux..
Removed 0 unused cells and 51 unused wires.
<suppressed ~4 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module arch.
Optimizing module comp.
Optimizing module decoder.
Optimizing module dff.
Optimizing module mux.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \arch..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \comp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \decoder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dff..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \arch.
  Optimizing cells in module \comp.
  Optimizing cells in module \decoder.
  Optimizing cells in module \dff.
  Optimizing cells in module \mux.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arch'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\dff'.
Finding identical cells in module `\mux'.
Removed a total of 0 cells.

3.6.13. Executing OPT_DFF pass (perform DFF optimizations).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arch..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \dff..
Finding unused cells or wires in module \mux..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module arch.
Optimizing module comp.
Optimizing module decoder.
Optimizing module dff.
Optimizing module mux.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing FSM pass (extract and optimize FSM).

3.7.1. Executing FSM_DETECT pass (finding FSMs in design).

3.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arch..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \dff..
Finding unused cells or wires in module \mux..

3.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.8. Executing OPT pass (performing simple optimizations).

3.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module arch.
Optimizing module comp.
Optimizing module decoder.
Optimizing module dff.
Optimizing module mux.

3.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arch'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\dff'.
Finding identical cells in module `\mux'.
Removed a total of 0 cells.

3.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \arch..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \comp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \decoder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dff..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \arch.
  Optimizing cells in module \comp.
  Optimizing cells in module \decoder.
  Optimizing cells in module \dff.
  Optimizing cells in module \mux.
Performed a total of 0 changes.

3.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arch'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\dff'.
Finding identical cells in module `\mux'.
Removed a total of 0 cells.

3.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$516 ($dff) from module dff (D = $procmux$166_Y, Q = \q, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$517 ($sdff) from module dff (D = \d, Q = \q).

3.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arch..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \dff..
Finding unused cells or wires in module \mux..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

3.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module arch.
Optimizing module comp.
Optimizing module decoder.
Optimizing module dff.
Optimizing module mux.

3.8.9. Rerunning OPT passes. (Maybe there is more to do..)

3.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \arch..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \comp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \decoder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dff..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \arch.
  Optimizing cells in module \comp.
  Optimizing cells in module \decoder.
  Optimizing cells in module \dff.
  Optimizing cells in module \mux.
Performed a total of 0 changes.

3.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arch'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\dff'.
Finding identical cells in module `\mux'.
Removed a total of 0 cells.

3.8.13. Executing OPT_DFF pass (perform DFF optimizations).

3.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arch..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \dff..
Finding unused cells or wires in module \mux..

3.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module arch.
Optimizing module comp.
Optimizing module decoder.
Optimizing module dff.
Optimizing module mux.

3.8.16. Finished OPT passes. (There is nothing left to do.)

3.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from port B of cell arch.$procmux$100_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell arch.$procmux$135_CMP0 ($eq).

3.10. Executing PEEPOPT pass (run peephole optimizers).

3.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arch..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \dff..
Finding unused cells or wires in module \mux..

3.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module arch:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module comp:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module decoder:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module dff:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module mux:
  created 0 $alu and 0 $macc cells.

3.13. Executing SHARE pass (SAT-based resource sharing).

3.14. Executing OPT pass (performing simple optimizations).

3.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module arch.
Optimizing module comp.
Optimizing module decoder.
Optimizing module dff.
Optimizing module mux.

3.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arch'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\dff'.
Finding identical cells in module `\mux'.
Removed a total of 0 cells.

3.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \arch..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \comp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \decoder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dff..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \arch.
  Optimizing cells in module \comp.
  Optimizing cells in module \decoder.
  Optimizing cells in module \dff.
  Optimizing cells in module \mux.
Performed a total of 0 changes.

3.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arch'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\dff'.
Finding identical cells in module `\mux'.
Removed a total of 0 cells.

3.14.6. Executing OPT_DFF pass (perform DFF optimizations).

3.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arch..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \dff..
Finding unused cells or wires in module \mux..

3.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module arch.
Optimizing module comp.
Optimizing module decoder.
Optimizing module dff.
Optimizing module mux.

3.14.9. Finished OPT passes. (There is nothing left to do.)

3.15. Executing MEMORY pass.

3.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

3.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arch..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \dff..
Finding unused cells or wires in module \mux..

3.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arch..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \dff..
Finding unused cells or wires in module \mux..

3.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arch..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \dff..
Finding unused cells or wires in module \mux..

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module arch.
Optimizing module comp.
<suppressed ~1 debug messages>
Optimizing module decoder.
Optimizing module dff.
Optimizing module mux.

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arch'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\dff'.
Finding identical cells in module `\mux'.
Removed a total of 0 cells.

3.17.3. Executing OPT_DFF pass (perform DFF optimizations).

3.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arch..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \dff..
Finding unused cells or wires in module \mux..

3.17.5. Finished fast OPT passes.

3.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module arch.
Optimizing module comp.
Optimizing module decoder.
Optimizing module dff.
Optimizing module mux.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arch'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\dff'.
Finding identical cells in module `\mux'.
Removed a total of 0 cells.

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \arch..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \comp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \decoder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dff..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \arch.
  Optimizing cells in module \comp.
  Optimizing cells in module \decoder.
  Optimizing cells in module \dff.
  Optimizing cells in module \mux.
Performed a total of 0 changes.

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arch'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\dff'.
Finding identical cells in module `\mux'.
Removed a total of 0 cells.

3.19.6. Executing OPT_SHARE pass.

3.19.7. Executing OPT_DFF pass (perform DFF optimizations).

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arch..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \dff..
Finding unused cells or wires in module \mux..

3.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module arch.
Optimizing module comp.
Optimizing module decoder.
Optimizing module dff.
Optimizing module mux.

3.19.10. Finished OPT passes. (There is nothing left to do.)

3.20. Executing TECHMAP pass (map to technology primitives).

3.20.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $dlatch.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $xnor.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $reduce_or.
No more expansions possible.
<suppressed ~184 debug messages>

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module arch.
<suppressed ~12 debug messages>
Optimizing module comp.
Optimizing module decoder.
Optimizing module dff.
Optimizing module mux.

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arch'.
<suppressed ~18 debug messages>
Finding identical cells in module `\comp'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\dff'.
Finding identical cells in module `\mux'.
Removed a total of 6 cells.

3.21.3. Executing OPT_DFF pass (perform DFF optimizations).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arch..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \dff..
Finding unused cells or wires in module \mux..
Removed 0 unused cells and 26 unused wires.
<suppressed ~1 debug messages>

3.21.5. Finished fast OPT passes.

3.22. Executing ABC pass (technology mapping using ABC).

3.22.1. Extracting gate netlist of module `\arch' to `<abc-temp-dir>/input.blif'..
Extracted 55 gates and 67 wires to a netlist network with 12 inputs and 12 outputs.

3.22.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.1.2. Re-integrating ABC results.
ABC RESULTS:               NOR cells:        3
ABC RESULTS:               AND cells:        2
ABC RESULTS:            ANDNOT cells:       16
ABC RESULTS:        internal signals:       43
ABC RESULTS:           input signals:       12
ABC RESULTS:          output signals:       12
Removing temp directory.

3.22.2. Extracting gate netlist of module `\comp' to `<abc-temp-dir>/input.blif'..
Extracted 45 gates and 53 wires to a netlist network with 8 inputs and 4 outputs.

3.22.2.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.2.2. Re-integrating ABC results.
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:        2
ABC RESULTS:             ORNOT cells:        8
ABC RESULTS:            ANDNOT cells:       22
ABC RESULTS:                OR cells:        4
ABC RESULTS:        internal signals:       41
ABC RESULTS:           input signals:        8
ABC RESULTS:          output signals:        4
Removing temp directory.

3.22.3. Extracting gate netlist of module `\decoder' to `<abc-temp-dir>/input.blif'..
Extracted 6 gates and 8 wires to a netlist network with 2 inputs and 4 outputs.

3.22.3.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.3.2. Re-integrating ABC results.
ABC RESULTS:               NOR cells:        1
ABC RESULTS:            ANDNOT cells:        2
ABC RESULTS:               AND cells:        1
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        4
Removing temp directory.

3.22.4. Extracting gate netlist of module `\dff' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

3.22.5. Extracting gate netlist of module `\mux' to `<abc-temp-dir>/input.blif'..
Extracted 31 gates and 46 wires to a netlist network with 14 inputs and 5 outputs.

3.22.5.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.5.2. Re-integrating ABC results.
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:               MUX cells:        8
ABC RESULTS:              NAND cells:        1
ABC RESULTS:                OR cells:        3
ABC RESULTS:               NOR cells:        3
ABC RESULTS:            ANDNOT cells:        6
ABC RESULTS:        internal signals:       27
ABC RESULTS:           input signals:       14
ABC RESULTS:          output signals:        5
Removing temp directory.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module arch.
Optimizing module comp.
Optimizing module decoder.
Optimizing module dff.
Optimizing module mux.

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arch'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\dff'.
Finding identical cells in module `\mux'.
Removed a total of 0 cells.

3.23.3. Executing OPT_DFF pass (perform DFF optimizations).

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arch..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \dff..
Finding unused cells or wires in module \mux..
Removed 0 unused cells and 159 unused wires.
<suppressed ~5 debug messages>

3.23.5. Finished fast OPT passes.

3.24. Executing HIERARCHY pass (managing design hierarchy).

3.24.1. Analyzing design hierarchy..
Top module:  \arch
Used module:     \dff
Used module:     \decoder
Used module:     \mux
Used module:         \comp

3.24.2. Analyzing design hierarchy..
Top module:  \arch
Used module:     \dff
Used module:     \decoder
Used module:     \mux
Used module:         \comp
Removed 0 unused modules.

3.25. Printing statistics.

=== arch ===

   Number of wires:                 42
   Number of wire bits:            109
   Number of public wires:          21
   Number of public wire bits:      88
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 74
     $_ANDNOT_                      16
     $_AND_                          2
     $_DLATCH_N_                    32
     $_NOR_                          3
     decoder                         1
     dff                            16
     mux                             4

=== comp ===

   Number of wires:                 37
   Number of wire bits:             48
   Number of public wires:           4
   Number of public wire bits:      15
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 37
     $_ANDNOT_                      22
     $_ORNOT_                        8
     $_OR_                           4
     $_XNOR_                         1
     $_XOR_                          2

=== decoder ===

   Number of wires:                  3
   Number of wire bits:              6
   Number of public wires:           3
   Number of public wire bits:       6
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4
     $_ANDNOT_                       2
     $_AND_                          1
     $_NOR_                          1

=== dff ===

   Number of wires:                  5
   Number of wire bits:              5
   Number of public wires:           5
   Number of public wire bits:       5
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $_SDFFE_PP0P_                   1

=== mux ===

   Number of wires:                 24
   Number of wire bits:             40
   Number of public wires:           5
   Number of public wire bits:      18
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 27
     $_ANDNOT_                       6
     $_DLATCH_N_                     4
     $_MUX_                          8
     $_NAND_                         1
     $_NOR_                          3
     $_ORNOT_                        1
     $_OR_                           3
     comp                            1

=== design hierarchy ===

   arch                              1
     decoder                         1
     dff                            16
     mux                             4
       comp                          1

   Number of wires:                369
   Number of wire bits:            547
   Number of public wires:         140
   Number of public wire bits:     306
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                325
     $_ANDNOT_                     130
     $_AND_                          3
     $_DLATCH_N_                    48
     $_MUX_                         32
     $_NAND_                         4
     $_NOR_                         16
     $_ORNOT_                       36
     $_OR_                          28
     $_SDFFE_PP0P_                  16
     $_XNOR_                         4
     $_XOR_                          8

3.26. Executing CHECK pass (checking for obvious problems).
Checking module arch...
Checking module comp...
Checking module decoder...
Checking module dff...
Checking module mux...
Found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=704.00) is a direct match for cell type $_DFFSR_PNN_.
  final dff cell mappings:
    \DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    \DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    unmapped dff cell: $_DFF_PN0_
    unmapped dff cell: $_DFF_PN1_
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    \DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

4.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\arch':
Mapping DFF cells in module `\comp':
Mapping DFF cells in module `\decoder':
Mapping DFF cells in module `\dff':
  mapped 1 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\mux':

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module arch.
Optimizing module comp.
Optimizing module decoder.
Optimizing module dff.
Optimizing module mux.

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arch'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\dff'.
Finding identical cells in module `\mux'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \arch..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \comp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \decoder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dff..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \arch.
  Optimizing cells in module \comp.
  Optimizing cells in module \decoder.
  Optimizing cells in module \dff.
  Optimizing cells in module \mux.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arch'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\dff'.
Finding identical cells in module `\mux'.
Removed a total of 0 cells.

5.6. Executing OPT_DFF pass (perform DFF optimizations).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arch..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \dff..
Finding unused cells or wires in module \mux..

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module arch.
Optimizing module comp.
Optimizing module decoder.
Optimizing module dff.
Optimizing module mux.

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\arch' to `<abc-temp-dir>/input.blif'..
Extracted 21 gates and 33 wires to a netlist network with 12 inputs and 12 outputs.

6.1.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:           OAI21X1 cells:        6
ABC RESULTS:             INVX1 cells:       12
ABC RESULTS:           AOI21X1 cells:        6
ABC RESULTS:        internal signals:        9
ABC RESULTS:           input signals:       12
ABC RESULTS:          output signals:       12
Removing temp directory.

6.2. Extracting gate netlist of module `\comp' to `<abc-temp-dir>/input.blif'..
Extracted 37 gates and 45 wires to a netlist network with 8 inputs and 4 outputs.

6.2.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.2.2. Re-integrating ABC results.
ABC RESULTS:            XOR2X1 cells:        3
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:           XNOR2X1 cells:        1
ABC RESULTS:           NAND3X1 cells:        2
ABC RESULTS:             INVX1 cells:       10
ABC RESULTS:            NOR2X1 cells:        6
ABC RESULTS:           NAND2X1 cells:        6
ABC RESULTS:           AOI21X1 cells:        4
ABC RESULTS:           OAI22X1 cells:        4
ABC RESULTS:        internal signals:       33
ABC RESULTS:           input signals:        8
ABC RESULTS:          output signals:        4
Removing temp directory.

6.3. Extracting gate netlist of module `\decoder' to `<abc-temp-dir>/input.blif'..
Extracted 4 gates and 6 wires to a netlist network with 2 inputs and 4 outputs.

6.3.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.3.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:        2
ABC RESULTS:            NOR2X1 cells:        3
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        4
Removing temp directory.

6.4. Extracting gate netlist of module `\dff' to `<abc-temp-dir>/input.blif'..
Extracted 2 gates and 7 wires to a netlist network with 4 inputs and 1 outputs.

6.4.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.4.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:        1
ABC RESULTS:           NAND2X1 cells:        2
ABC RESULTS:           AOI21X1 cells:        1
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        1
Removing temp directory.

6.5. Extracting gate netlist of module `\mux' to `<abc-temp-dir>/input.blif'..
Extracted 22 gates and 36 wires to a netlist network with 14 inputs and 5 outputs.

6.5.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.5.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:       10
ABC RESULTS:           NAND3X1 cells:        4
ABC RESULTS:           NAND2X1 cells:        6
ABC RESULTS:           OAI21X1 cells:        8
ABC RESULTS:           AOI21X1 cells:        4
ABC RESULTS:          _const0_ cells:        1
ABC RESULTS:        internal signals:       17
ABC RESULTS:           input signals:       14
ABC RESULTS:          output signals:        5
Removing temp directory.

7. Executing FLATTEN pass (flatten design).
Deleting now unused module comp.
Deleting now unused module decoder.
Deleting now unused module dff.
Deleting now unused module mux.
<suppressed ~22 debug messages>

8. Executing SETUNDEF pass (replace undef values with defined constants).
Removed 0 unused cells and 554 unused wires.

9. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port arch.address: Missing option -inpad.
Don't map input port arch.address_read_a: Missing option -inpad.
Don't map input port arch.address_read_b: Missing option -inpad.
Don't map input port arch.clck: Missing option -inpad.
Don't map input port arch.data_a: Missing option -inpad.
Don't map input port arch.data_b: Missing option -inpad.
Mapping port arch.data_out_a using BUFX2.
Mapping port arch.data_out_b using BUFX2.
Don't map input port arch.read_a: Missing option -inpad.
Don't map input port arch.read_b: Missing option -inpad.
Don't map input port arch.rst: Missing option -inpad.
Don't map input port arch.write: Missing option -inpad.

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module arch.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arch'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \arch..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \arch.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arch'.
Removed a total of 0 cells.

10.6. Executing OPT_DFF pass (perform DFF optimizations).
Handling always-active async load on $flatten\m4.$auto$ff.cc:266:slice$630 ($_DLATCH_N_) from module arch (changing to combinatorial circuit).
Handling always-active async load on $flatten\m4.$auto$ff.cc:266:slice$629 ($_DLATCH_N_) from module arch (changing to combinatorial circuit).
Handling always-active async load on $flatten\m4.$auto$ff.cc:266:slice$628 ($_DLATCH_N_) from module arch (changing to combinatorial circuit).
Handling always-active async load on $flatten\m4.$auto$ff.cc:266:slice$627 ($_DLATCH_N_) from module arch (changing to combinatorial circuit).
Handling always-active async load on $flatten\m3.$auto$ff.cc:266:slice$630 ($_DLATCH_N_) from module arch (changing to combinatorial circuit).
Handling always-active async load on $flatten\m3.$auto$ff.cc:266:slice$629 ($_DLATCH_N_) from module arch (changing to combinatorial circuit).
Handling always-active async load on $flatten\m3.$auto$ff.cc:266:slice$628 ($_DLATCH_N_) from module arch (changing to combinatorial circuit).
Handling always-active async load on $flatten\m3.$auto$ff.cc:266:slice$627 ($_DLATCH_N_) from module arch (changing to combinatorial circuit).
Handling always-active async load on $flatten\m2.$auto$ff.cc:266:slice$630 ($_DLATCH_N_) from module arch (changing to combinatorial circuit).
Handling always-active async load on $flatten\m2.$auto$ff.cc:266:slice$629 ($_DLATCH_N_) from module arch (changing to combinatorial circuit).
Handling always-active async load on $flatten\m2.$auto$ff.cc:266:slice$628 ($_DLATCH_N_) from module arch (changing to combinatorial circuit).
Handling always-active async load on $flatten\m2.$auto$ff.cc:266:slice$627 ($_DLATCH_N_) from module arch (changing to combinatorial circuit).
Handling always-active async load on $flatten\m1.$auto$ff.cc:266:slice$630 ($_DLATCH_N_) from module arch (changing to combinatorial circuit).
Handling always-active async load on $flatten\m1.$auto$ff.cc:266:slice$629 ($_DLATCH_N_) from module arch (changing to combinatorial circuit).
Handling always-active async load on $flatten\m1.$auto$ff.cc:266:slice$628 ($_DLATCH_N_) from module arch (changing to combinatorial circuit).
Handling always-active async load on $flatten\m1.$auto$ff.cc:266:slice$627 ($_DLATCH_N_) from module arch (changing to combinatorial circuit).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arch..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module arch.

10.9. Rerunning OPT passes. (Maybe there is more to do..)

10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \arch..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \arch.
Performed a total of 0 changes.

10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arch'.
Removed a total of 0 cells.

10.13. Executing OPT_DFF pass (perform DFF optimizations).

10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arch..

10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module arch.

10.16. Finished OPT passes. (There is nothing left to do.)

11. Executing BLIF backend.

12. Printing statistics.

=== arch ===

   Number of wires:                389
   Number of wire bits:            474
   Number of public wires:         389
   Number of public wire bits:     474
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                454
     $_DLATCH_N_                    32
     AND2X2                          1
     AOI21X1                        54
     BUFX2                          32
     DFFPOSX1                       16
     INVX1                         110
     NAND2X1                        80
     NAND3X1                        24
     NOR2X1                         27
     NOR3X1                          4
     OAI21X1                        38
     OAI22X1                        16
     OR2X2                           4
     XNOR2X1                         4
     XOR2X1                         12

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: 651c9a44ea, CPU: user 0.22s system 0.03s, MEM: 14.21 MB peak
Yosys 0.33 (git sha1 2584903a060)
Time spent: 64% 2x abc (0 sec), 9% 20x opt_expr (0 sec), ...
Running getpowerground to determine power and ground net names.
getpowerground.tcl  /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef
Cleaning up output syntax
ypostproc.tcl arch_mapped.blif arch /usr/local/share/qflow/tech/osu035/osu035.sh vdd gnd 
Cleaning up blif file syntax
blifFanout not run:  No cell size optimization.

Generating RTL verilog and SPICE netlist file in directory
	 /home/kor-tac/Desktop/physical/dpram/synthesis
Files:
   Verilog: /home/kor-tac/Desktop/physical/dpram/synthesis/arch.rtl.v
   Verilog: /home/kor-tac/Desktop/physical/dpram/synthesis/arch.rtlnopwr.v
   Verilog: /home/kor-tac/Desktop/physical/dpram/synthesis/arch.rtlbb.v
   Spice:   /home/kor-tac/Desktop/physical/dpram/synthesis/arch.spc

Running blif2Verilog.
Running blif2BSpice.
Running spi2xspice.py
spi2xspice.py "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" arch.spc arch.xspice

Synthesis script ended on Sat Jul 26 05:21:05 PM IST 2025
